"""
Interface des boutons Telegram pour les annonces.

Ce module gÃ©nÃ¨re les boutons interactifs des annonces Telegram :
- Bouton "Order" : Pour passer une commande
- Bouton "Proof" : Pour demander une preuve de qualitÃ©

FonctionnalitÃ©s :
- GÃ©nÃ©ration d'ID unique pour chaque annonce
- Suivi des interactions utilisateur
- IntÃ©gration avec le systÃ¨me de callbacks Telegram
"""

import time

from telegram import InlineKeyboardButton, InlineKeyboardMarkup

import json_processor.announcement_json as AJ


class ButtonTelegram():
    """
    GÃ©nÃ©rateur de boutons pour les annonces Telegram.

    Chaque annonce a des boutons uniques identifiÃ©s par un timestamp
    pour Ã©viter les conflits entre diffÃ©rentes sessions d'annonces.
    """

    def __init__(self)  -> None:
        """
        Initialise les boutons avec un ID unique basÃ© sur le timestamp.

        L'ID unique permet de :
        - DiffÃ©rencier les annonces multiples
        - Ã‰viter les interactions croisÃ©es
        - Suivre les statistiques par annonce
        """
        self.unique_id = str(int(time.time()))
        AJ.AnnouncementJson.set_json_variable("last_announce_id", self.unique_id)

        # CrÃ©ation des boutons avec callbacks uniques
        keyboard = [
            [InlineKeyboardButton("ğŸ’µ Order", callback_data=f"order-{self.unique_id}"),
            InlineKeyboardButton("ğŸ”¥ Proof", callback_data=f"order-{self.unique_id}")]
        ]
        self.reply_markup = InlineKeyboardMarkup(keyboard)

    def get_button_order_proof(self) -> InlineKeyboardMarkup:
        """
        Retourne les boutons formatÃ©s pour l'envoi Telegram.

        Returns:
            InlineKeyboardMarkup: Boutons prÃªts Ã  Ãªtre envoyÃ©s avec un message

        UtilisÃ© dans les fonctions d'envoi d'annonces pour attacher
        les boutons interactifs aux messages.
        """
        return self.reply_markup